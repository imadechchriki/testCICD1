name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build avec noms d'images spécifiques
    - name: Build services
      run: |
        # Utilise la nouvelle syntaxe sans tiret
        docker compose build --pull
        
        # Obtenir les noms complets des images générées par docker-compose
        FRONTEND_IMAGE=$(docker compose images -q frontend)
        API_IMAGE=$(docker compose images -q api)
        
        echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
        echo "API_IMAGE=$API_IMAGE" >> $GITHUB_ENV

    - name: Test frontend
      run: |
        docker compose run --rm frontend npm test || true

    - name: Test API
      run: |
        docker compose run --rm api npm test || true

    # Push to DockerHub if on main/master branch
    - name: Tag and push images to DockerHub
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Tag avec les noms d'images complets
        docker tag ${{ env.FRONTEND_IMAGE }} imadch/cicd:frontend-${{ github.sha }}
        docker tag ${{ env.FRONTEND_IMAGE }} imadch/cicd:frontend-latest
        
        docker tag ${{ env.API_IMAGE }} imadch/cicd:api-${{ github.sha }}
        docker tag ${{ env.API_IMAGE }} imadch/cicd:api-latest
        
        # Push des images
        docker push imadch/cicd:frontend-${{ github.sha }}
        docker push imadch/cicd:frontend-latest
        docker push imadch/cicd:api-${{ github.sha }}
        docker push imadch/cicd:api-latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Option 1: Deploy to a server via SSH
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /path/to/your/project
          git pull
          docker compose pull
          docker compose up -d
